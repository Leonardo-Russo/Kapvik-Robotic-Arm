function Q = inv_kine(X)
% Description: this will be the shell function for the inverse kinematics.
% 
% Inputs:
% X = carthesian state vector
% Outputs:
% Q = joints state vector

% Settings for fmincon()
OptionsFMIN = optimoptions('fmincon', ...
    'PlotFcn', {@optimplotfval}, ...
    'Display', 'iter-detailed', ...
    'StepTolerance', 1e-12, ...
    'ConstraintTolerance', 1e-9, ...
    'Algorithm', 'sqp', ...
    'Diagnostics', 'off', ...
    'MaxFunctionEvaluations', 1000);


% Settings for particleswarm()
OptionsPSO = optimoptions('particleswarm', ...
    'PlotFcn', {@pswplotbestf}, ...
    'HybridFcn', {@fmincon, OptionsFMIN}, ...   % hybrid function setting
    'SwarmSize', 100, ...
    'Display', 'iter', ...
    'InertiaRange', [0.1 1.1], ...
    'UseParallel', true, ...
    'MaxIterations', 100);


% Set the Joint Variable Boundaries
lb = [-2*pi, -2*pi, -2*pi, -2*pi];
ub = [2*pi, 2*pi, 2*pi, 2*pi];

dim = 4;        % nÂ° of joint variables

% Perform the Optimization
Q = particleswarm(@(Q) InvKineObjFun(Q, X), dim, lb, ub, OptionsPSO);


end